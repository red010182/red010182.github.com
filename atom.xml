<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://red010182.github.com/atom.xml" rel="self"/>
  <link href="http://red010182.github.com/"/>
  <updated>2013-03-08T14:43:37+08:00</updated>
  <id>http://red010182.github.com/</id>
  <author>
    <name><![CDATA[tpy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WordPress搬家]]></title>
    <link href="http://red010182.github.com/blog/2013/03/08/wordpressban-jia/"/>
    <updated>2013-03-08T11:21:00+08:00</updated>
    <id>http://red010182.github.com/blog/2013/03/08/wordpressban-jia</id>
    <content type="html"><![CDATA[<p>Wordpress(WP)搬家是一件很痛苦的事，從serverA要搬到serverB，其中的LAMP環境、資料表、ftp、各式各樣的帳號密碼什麼的通通都要來一次設定，相當之累人。這邊記錄一下我自己是怎麼搬家的</p>

<p>假設我在serverA工作，開發完了，想搬到serverB的話</p>

<h2>先在serverB做以下設定</h2>

<ol>
<li>Setup LAMP環境，可參考<a href="http://red010182.github.com/blog/2013/03/05/setup-a-lamp-with-phpmyadmin-on-aws-ec2/">這裡</a></li>
<li>設定ftp，參考<a href="http://red010182.github.com/blog/2013/03/08/how-to-install-and-configure-vsftpd/">這裡</a>。ps. 如果之後ftp連線出現問題，試著把<code>chroot_local_user=YES</code>拿掉。</li>
<li>打開phpmyadmin，建立資料表，建議名稱與serverA WP所用的一樣，至少我自己是這樣用</li>
<li>安裝wordpress，一定要的，這邊注意一下資料表的前綴字串最好要跟serverA相同。</li>
<li>安裝<a href="http://wordpress.org/extend/plugins/wordpress-move/">wordpress move plugin</a>，不用做任何設定</li>
</ol>


<h2>然後在serverA端</h2>

<ol>
<li><p>安裝<a href="http://wordpress.org/extend/plugins/wordpress-move/">wordpress move plugin</a>，在Setting -> WordPress Move裡設定ftp，等等會透過這些設定連ftp到serverB上傳備份檔。Remote Backup Path用預設的&#8221;/var/www/wp-content/plugins/wordpress-move/backup/&#8221;即可。如果之後ftp連線失敗，再改一下Use Passive Mode的選項，我這邊是選NO。</p></li>
<li><p>Tool -> Backup Manager -> Create a Full Backup。Full Backup會備份WP的程式檔以及WP所用的資料表.sql檔。</p></li>
<li><p>Tool -> Migration Assistant -> Migrate。這個動作是把剛剛的備份檔上傳到serverB的<strong>Remote Backup Path</strong>。不要去改Change Domain Name，它會把你在serverA的網址改掉，serverA的網址大部份情況是不需要改。</p></li>
</ol>


<h2>再回到serverB</h2>

<ol>
<li>Tool -> Migration Assistant -> Restore。利用剛剛所上傳的備份檔，進行還原，執行需一段時間。這個還原好像不包括theme，所以有必要的話之後再安裝一次theme。</li>
</ol>


<h2>大功告成</h2>

<p>That&#8217;s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install and configure vsftpd]]></title>
    <link href="http://red010182.github.com/blog/2013/03/08/how-to-install-and-configure-vsftpd/"/>
    <updated>2013-03-08T11:17:00+08:00</updated>
    <id>http://red010182.github.com/blog/2013/03/08/how-to-install-and-configure-vsftpd</id>
    <content type="html"><![CDATA[<p>這是一篇很值得讀的ftp設定文，有教怎麼設定使用者的ftp路徑，wordpress朋友不容錯過</p>

<p><a href="http://www.noob2geek.com/linux/setup-vsftpd-debian-ubuntu/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails vs Django]]></title>
    <link href="http://red010182.github.com/blog/2013/03/05/rails-vs-django/"/>
    <updated>2013-03-05T09:53:00+08:00</updated>
    <id>http://red010182.github.com/blog/2013/03/05/rails-vs-django</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>近期內要決定server端的開發環境，主要考慮Ruby為主的Ruby on Rails(簡稱Rails)跟python為主的Django。關於這兩個框架的比較，已經有N百篇了，隨便google都有，但是少有中文的資訊，在這邊把它整理一下，希望能給其他人一點幫助～先聲明的是，這種東西是沒有絕對答案的，每個團隊成員的背景跟web application的訴求都不同，考量的層面也不同，選擇最適合自己應用的框架才是最重要的。</p>

<p>在這邊我們主要考量的點有：
1. 必須因應變化快速的需求
2. 良好的socke支援:希望開發框架使用的語言跟將來寫socket programming的語言一致，所以Ruby跟Python對socket的支援(lib, api, 3rd party resources…等)必須列入考量。
3. 可以的話也要支援social game development XD</p>

<p>這是前人的體驗跟比較</p>

<h2>Rails跟Django都用過，最後選擇Django</h2>

<ul>
<li><a href="http://www.screamingatmyscreen.com/2012/2/19/business_decision_-_why_i_use_django_and_not_ruby_on_rails.html">Business Decision – Why I use Django and not Ruby On Rails</a></li>
</ul>


<h2>Rails跟Django都用過，最後選擇Rails</h2>

<ul>
<li><p><a href="http://batsov.com/articles/2011/06/19/django-vs-rails/">Django 1.3 vs Rails 3: A Not So Final Showdown</a>
&#8230;資深Rails跟Python(but new to Django)architecture decider的觀點</p></li>
<li><p><a href="http://www.unfish.net/archives/223-20071109.html">为什么我从Ruby on Rails转向Django又转回来</a>
&#8230;先用Rails然後轉向Django，又轉回Rails</p></li>
<li><p><a href="http://huacnlee.com/blog/rails-vs-django/">Rails VS Django – 为什么我要选择 Rails!</a>
&#8230;先學Python/Django然後愛上Rails</p></li>
</ul>


<h2>Point of View: Socket Programming</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/7156837/ruby-vs-python-socket-libraries">Ruby Vs Python – Socket Libraries</a></li>
<li><a href="http://stackoverflow.com/questions/1813575/its-a-good-idea-use-ruby-for-socket-programming">It’s a good idea use ruby for socket programming?</a></li>
</ul>


<p>結論：兩者這方面的library都差不多，跟語言沒多大關係。</p>

<h2>Point of View: Game development</h2>

<p>就我所知，已經有一些Online game的server端用python去處理遊戲邏輯。然而我不知道的是，原來ruby也成熟到被用來開發遊戲(不是rails哦，純粹ruby)，而且還是遊戲界赫赫有名的zynga(聽過開心農場吧!?)，看看zynga的ruby徵才。</p>

<p>另外，there’s a <a href="http://gamedev.stackexchange.com/questions/3574/is-ruby-a-suitable-language-for-game-development">point of view from a JAVA coder</a>，其中一段，關於ruby對於2D、3D遊戲繪圖的支援有不錯的解說。</p>

<h2>Point of View: Popularity</h2>

<p>有個人在2010年時<a href="http://www.fluther.com/74038/more-rails-devsjobs-than-django/">問了一個問題</a>：「為什麼Rails的工作比Django多那麼多？」根據他在indeed.com(類似國外的104人力銀行)的調查，Rails跟Django的工作數量大約是6000比300。這件事讓我很訝異，我一直以為Rails跟Django是差不多雷同的框架，使用者應該也差不多，工作職缺應該也是，然而事實似乎並非如此。於是我自己調查indeed.com上的數量，得到以下數字(ps.地區僅以US為主)</p>

<table>
<thead>
<tr>
<th align="left">搜尋關鍵字 </th>
<th align="center"> 職缺數量</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">rails </td>
<td align="center"> 12969</td>
</tr>
<tr>
<td align="left">ruby on rails </td>
<td align="center"> 4757</td>
</tr>
<tr>
<td align="left">django       </td>
<td align="center">  1385  </td>
</tr>
<tr>
<td align="left">ruby             </td>
<td align="center"> 12075  </td>
</tr>
<tr>
<td align="left">python       </td>
<td align="center"> 19562  </td>
</tr>
<tr>
<td align="left">php          </td>
<td align="center"> 19148    </td>
</tr>
</tbody>
</table>


<p>有趣的是，python的職缺數量比ruby多，但rails跟django剛好相反。我想或許是因為python比ruby早了十幾年，所以使用python的人比較多這也是很合理的。但無論是rails或ruby on rails的職缺都比django來的多。另外，python多於php也是蠻有意思的，我想是因為python除了開發web以外還常被用來作其他事情，例如科學計算..等等(python萬用阿XD)，搜尋結果整體看起來，還算make sense。</p>

<p>雖然說職缺不直接=使用人口，但我想一定也可以某種程度上反應出來，畢竟職缺多，代表選擇使用rails的公司就多，而且學的人也會比較多。</p>

<p>結論：我認為國外的Rails使用者應該是遠大於Django</p>

<h2>Point of View: Community and 3rd party libraries</h2>

<p>從使用人口來推斷的話，社群支援程度我想應該也是Rails比較好。[]也提到不管從google趨勢或是stackoverflow.com上的問題數量看起來，Rails在這方面是勝出的。</p>

<p>然而Python是一個蠻成熟的體系，累積了很多高品質的3rd party libraries跟API，這是蠻不錯的優點。但是他也提到一個問題，就是Python現在(2011年6月時)面臨一個十字路口，新版的python 3.0向下相容的程度有限，Django更只支援2.4，更之後甚至只支援2.7以上的python版本，所以有很多優秀的python插件，Django是不能用的。這一點應該會隨著時間改善，畢竟到現在也過了一年多了，目前的狀況還需要更進一步的調查。</p>

<h2>Point of View: Deploy</h2>

<p>Deploy也是很重要的，可以預期的是，一個startup剛開始一定會頻繁的deploy，關於這點，似乎是rails的強項，尤其是heroku完全就是設計來讓rails deploy的，他已經不單單只是一個tool了，而是一個完整的PaaS。根據我自己使用的經驗，git配上heroku來deploy只有優雅兩字可以形容。</p>

<p>這邊整理幾個deploy的工具
Rails:
Amazon Elastic Beanstalk (2012/Nov update)
Google App Engine (run on Jruby)
Heroku
capistrano
webistrano
passenger</p>

<p>Django:
Amazon Elastic Beanstalk
Google App Engine
Fabric</p>

<h2>結論</h2>

<p>看完以上所有參考文章，整理出幾個重點</p>

<h3>Rails優點</h3>

<ul>
<li>Migration很優，連選擇Django的人都說讚，可大幅降低更動資料庫的痛苦。</li>
<li>社群活躍，資源豐富。</li>
<li>Deploy是他的強項，有很多工具可以用，也有專門的PaaS。</li>
<li>authentication跟admin有不錯的gem可用</li>
<li>convention over configuration可以節省很多瑣碎的設定。</li>
<li>連zynga都用ruby寫social game，讓人為之一亮!!</li>
<li>完全MVC</li>
<li>Heavily Test Driven</li>
<li>大量遵循RESTful</li>
</ul>


<h3>Django優點</h3>

<ul>
<li>比Rails好學</li>
<li>得益於python的嚴謹，寫法固定好維護。</li>
<li>內建admin。</li>
<li>有South可以處理資料庫更動。</li>
<li>內建authentication system</li>
<li>Python似乎有比較高品質的3rd libraries或API</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup a LAMP Server with phpmyadmin on AWS-EC2]]></title>
    <link href="http://red010182.github.com/blog/2013/03/05/setup-a-lamp-with-phpmyadmin-on-aws-ec2/"/>
    <updated>2013-03-05T09:17:00+08:00</updated>
    <id>http://red010182.github.com/blog/2013/03/05/setup-a-lamp-with-phpmyadmin-on-aws-ec2</id>
    <content type="html"><![CDATA[<p>First of all, launch an EC2 with this AMI (for cost effective, this blog uses spot micro instance for example)</p>

<h2>Launch Instance</h2>

<p>&#8220;ubuntu/images/ebs/ubuntu-precise-12.04-amd64-server-20120616 (ami-5965401c)&#8221;</p>

<p>you can easily find this AMI by searching the AMI ID: ami-5965401c</p>

<p>Connect to remote server</p>

<p>In your mac, open the terminal</p>

<pre><code>ssh -i [security_key.pem] ubuntu@[ec2_public_DNS]
</code></pre>

<h2>Trouble shooting</h2>

<p>if you get into trouble with some error message like “RSA host key  has changed …&#8221; when you try to connect to remote server,</p>

<p>follow this to delete some text in .ssh/known_hosts file on your local machine:</p>

<p>For example in my mac</p>

<p>open .ssh/known_hosts file by (where sb is my self-defined command for sblime text 2, you might just open it with your favorite editor)</p>

<pre><code>sb ~/.ssh/known_hosts
</code></pre>

<p>delete the whole entry of problem ip</p>

<h2>Install LAMP</h2>

<p>Follow this to install LAMP-server by typing</p>

<pre><code>sudo apt-get update
sudo tasksel install lamp-server
</code></pre>

<h2>Install phpmyadmin</h2>

<pre><code>sudo apt-get install phpmyadmin
</code></pre>

<p>in</p>

<pre><code>/etc/apache2/apache2.conf
</code></pre>

<p>add</p>

<pre><code>Include /etc/phpmyadmin/apache.conf
</code></pre>

<p>Then restart server</p>

<pre><code>sudo /etc/init.d/apache2 restart
</code></pre>

<p>—————————-</p>

<h2>Install WordPress</h2>

<p>it should be pretty easy when you done this far
root to blog directory and download latest wordpress file, unzip it then open your browser on http://your_domain/blog</p>

<pre><code>cd /var/www/blog
wget http://wordpress.org/latest.tar.gz
tar -xzvf latest.tar.gz
</code></pre>

<p>Config wordpress install themes/plugins without ftp: add this to wp-config.php</p>

<pre><code>define('FS_METHOD', 'direct');
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup an FTP server on Ubuntu]]></title>
    <link href="http://red010182.github.com/blog/2013/03/04/linux-ftp-server-on-ubuntu/"/>
    <updated>2013-03-04T19:59:00+08:00</updated>
    <id>http://red010182.github.com/blog/2013/03/04/linux-ftp-server-on-ubuntu</id>
    <content type="html"><![CDATA[<p>這麼一個基本的功能，每次都要弄一大堆設定，真的是無敵煩，為了一勞永逸，我決定要把它記錄下來!!</p>

<h2>前置步驟</h2>


<p>這個是ubuntu最有名的ftp server軟體，我也沒比較過其他的，就用吧</p>

<pre><code>sudo apt-get install vsftpd
</code></pre>

<p>安裝完之後，可以用這個指令查看網路狀態(超實用)</p>

<pre><code>netstat -tul
</code></pre>

<p>或者只看ftp的狀態</p>

<pre><code>netstat -tul | grep ftp
</code></pre>

<p>由於這個指令實在太好用了，直接加入自定指令:
in <code>~/.bashrc</code> add:</p>

<pre><code>alias net='netstat -tul'
</code></pre>

<p>然後存檔並重新讀取shell(重新登入，或者直接輸入下列指令)</p>

<pre><code>exec bash
</code></pre>

<p>然後就可以用開心地用net這個指令查網路狀態囉</p>

<p>登入ftp當然需要帳號密碼，因為這樣比較安全，或許可以去創一個新的帳號專門跟ftp掛勾，或者用既有ubuntu的帳號也可以，如果你忘記自己帳號的密碼的話，就這麼做:</p>

<pre><code>su              // 切換成root，或者sudo su(for bitnami users)
passwd user     // theAccountThatYouForgotThePassword
</code></pre>

<p>然後就可以輸入新密碼了</p>

<h2>vsftpd正式開始</h2>


<p>在<code>/etc/vsftpd.conf</code>最後面新增幾行code:</p>

<pre><code>listen=YES
listen_address=0.0.0.0
write_enable=YES
local_enable=YES
anonymous_enable=NO
local_umask=022
</code></pre>

<p>然後重啟ftp server:</p>

<pre><code>sudo /etc/init.d/vsftpd restart
</code></pre>

<p>打完收工!</p>

<p>ps. 所有vsftpd相關的設定檔、user list檔、ch_root什麼鬼的，通通都在/etc裡</p>

<p>最後提醒一下，在client端用ftp軟體連線的時候，如果遇到問題試試看改成主動模式
That’s it!</p>

<p>不錯的參考資訊：</p>

<ul>
<li><a href="http://blog.udn.com/nigerchen/2261345">ubuntu FTP SERVER 安裝設置( vsftp 版本 )</a></li>
<li><a href="http://www.wretch.cc/blog/taiyichuan/21131053">伺服器以無法路由的 IP Address 送出了被動式回應. 改為使用伺服器 IP Address 問題</a></li>
<li><a href="http://matisse.wordpress.com/2007/10/30/%E8%BD%89%E9%8C%84-ftp-%E4%B8%BB%E5%8B%95%E6%A8%A1%E5%BC%8F%E8%88%87%E8%A2%AB%E5%8B%95%E6%A8%A1%E5%BC%8F/">FTP 主動模式與被動模式</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何用Octopress架部落格在Github上(免費)]]></title>
    <link href="http://red010182.github.com/blog/2013/02/26/how-to-use-octorpress-on-github/"/>
    <updated>2013-02-26T23:42:00+08:00</updated>
    <id>http://red010182.github.com/blog/2013/02/26/how-to-use-octorpress-on-github</id>
    <content type="html"><![CDATA[<h2>什麼是octopress</h2>

<p>octopress是一套讓你寫blog的程式。聽起來好像沒啥特別的，不過他其實很不一樣。一般的部落格系統(或是更專門的術語content manage system, CMS)，像是wordpress, google的blogger, 無名小站, 痞客幫&#8230;等，清一色都是架構在動態網站上，也就是網站需要run在類似php這種動態語言的環境，而且通常會搭配著apache, mysql, linux，這個環境簡稱LAMP(Linux + Apache + Mysql + PHP)。</p>

<p>那這樣有什麼壞處呢? 首先，第一個你必須找一個LAMP環境的主機去放你的網站，不管是實體主機還是虛擬主機，這多半都需要錢，就算免費也會有廣告，看著別人的廣告放在自己的blog上一閃一閃的，整個就是噁心。第二個，最令人討厭的是你必須忍受在瀏覽器上用網頁編寫文章!! 也就是所謂的網站後台附贈的文字編輯器，這通常都很難用，內建的「所見即所得編輯器」排版常會亂掉，因此你免不了要跟html tag打交道，讓人仿佛置身於寫網頁當中&#8230;</p>

<p><big><strong><em>BUT!! 我是在寫文章不是在寫網頁!!!</em></strong></big></p>

<p>而這又是很繁瑣的事情，因為你很難在網頁編輯器處理好落落長的html縮排，而且這些tag也很煩。這件事情，果然大家都有感受到&#8230;</p>

<blockquote><p>貼圖麻煩、排版麻煩、host麻煩、樣樣麻煩&#8230;<a href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress/">XDite</a></p></blockquote>

<p>身為一個programmer，有自己用慣的text editor也是很合理的事，加上<a href="http://en.wikipedia.org/wiki/Markdown">markdown</a>處理排版比html更方便簡潔，讓人開始幻想如果能在這樣的環境blogging那將是多麼幸福快樂的事啊&#8230;!</p>

<p>沒錯，Octopress就是為此而生的，它是在本機電腦用text editor編輯markdown來寫blog，排版貼圖貼連結都還挺方便的，寫完之後經過rake處理完產生純靜態檔deploy至網頁空間，完完全全不需要動態語言的環境!! 甚至還能「用git來版本控制blog」!!</p>

<p><del>沒想到寫blog也可以是這麼宅的事</del></p>

<p>ps. octopress不太適合程式<a href="http://zh.wikipedia.org/wiki/%E9%BA%BB%E7%93%9C">麻瓜</a></p>

<h2>先裝ruby才能裝octopress</h2>

<p>原因很簡單，octopress是ruby寫的，想執行它你必須有ruby環境。不過呢，一直以來在OSX裝ruby不是一件太容易的事，你要搞rvm, 環境變數, 還要避免跟OSX內建的ruby版本衝突，還有一些dependency&#8230;etc. 運氣好的話一個小時可以搞定，運氣不好的話可能要花一個上午。</p>

<p>然而最近我發現有個<a href="http://railsinstaller.org/">好物</a>，不消一杯咖啡的時間，躺著都可以搞定，裝過一次就回不去了!! 這個安裝包同時也會幫你安裝git，這麼nice還不用嗎？</p>

<p>裝完之後檢查一下</p>

<pre><code>ruby -v
rails -v 
rvm -v
</code></pre>

<p>查看這三個主要套件的版本是否為最新，另外幾個常用的指令</p>

<pre><code>rvm list        # 列出目前「透過rvm」安裝的各種ruby版本
rvm use 1.9.3   # 切換至ruby 1.9.3版
</code></pre>

<p>請務必把ruby版本切換至1.9.2或更新，以下的範例都是用1.9.3。</p>

<h2>安裝octopress在本機電腦</h2>

<p>既然安裝包已經安裝好git了，那就直接複製github上的repo吧!</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress    # 如果你用rvm，這時候你有可能會被問到是否相信這個.rvmrc檔案來管理你的ruby環境，選擇yes
</code></pre>

<p>切到octopress資料夾後，利用bundler來安裝所有ruby相關的dependency。不過呢，你必須先安裝bundler</p>

<pre><code>gem install bundler
</code></pre>

<p>接著利用bundler安裝Gemfile裡面的gem，bundler會幫你處理dependency</p>

<pre><code>bundle install
</code></pre>

<p>然後安裝octopress預設的佈景主題吧!</p>

<pre><code>rake install
</code></pre>

<p>到目前為止，已經有一個完整的「產生blog的系統」安裝在你的機器上了。這就來看一下他「產生」的blog長什麼樣子</p>

<pre><code>rake preview    # octopress啓動一個網頁伺服器，預設port為4000
</code></pre>

<p>然後打開你的browser，網址輸入<a href="http://localhost:4000">localhost:4000</a>。鏘鏘!! 你已經完成一個屬於自己的blog了! 下一步就是把這個blog放到一個網路空間去。</p>

<h2>部署octopress的方法</h2>

<pre><code>rake generate   # 產生編譯過的靜態檔案至_deploy資料夾內
</code></pre>

<p>部署octopress其實只要找個免費空間，把_deploy內的檔案全部上傳即可，可以是dropbox或是其他數不盡的免費網頁空間。但是最夯的還是<a href="http://octopress.org/docs/deploying/">這些</a>:</p>

<ul>
<li>Github</li>
<li>Heroku</li>
<li>Rsync</li>
</ul>


<p>至於要選擇哪一個，詳細我也沒研究，我個人是偏好github</p>

<h2>部署octopress至Github (免費)</h2>

<p>到Github申請一個帳號，開一個repo，請原諒懶惰的小弟，這部分就不在此贅述了。唯一要注意的就是，<strong>repo的名稱必須是your_github_user_name.github.com</strong>。</p>

<p>設定octopress將來自動幫你部署，然後在terminal輸入</p>

<pre><code>rake setup_github_pages
</code></pre>

<p><a href="http://octopress.org/docs/deploying/github/">官網教學</a></p>

<h2>generate ssh keys</h2>

<p>這部分是比較麻煩的地方，當代的許多網路服務都會透過ssh安全加密連線來傳送資料，heroku或github都是，亞馬遜AWS也是，可以說ssh連線已經成為潮流了。他的運作原理真要講起來也是很複雜，簡單一句話就是ssh是透過鑰匙來認證身份的，public key跟private key。public key就像是真實世界的鎖頭，而private key像是真實世界的鑰匙，每一個public key都有其對應的private key，ssh運作的原理就是當你連線的時候，這個連線會帶上一個private key去match對方的public key，換句話說就是帶上一把鑰匙去開對方的鎖頭，開成了就成了。而public key跟private key其實就只是一個檔案而已，只不過這檔案裡的內容是透過一種叫做rda演算法所算出來的加密字串。因為它只是檔案所以可以被複製貼上，所以你可以擁有很多鑰匙跟鎖頭，除此之外你也可以有「多個」鑰匙-鎖頭組(key pair)，同一組key pair內的public key跟private key是互相對應的，然而不同的key pair之間的key都不互相對應，就像是你沒辦法把腳踏車鑰匙當成機車鑰匙一樣，腳踏車鑰匙只能打開腳踏車上的鎖頭，而機車鑰匙只能發動機車(這也是一種鎖頭)。</p>

<p>言歸正傳，如果你想要透過ssh用git push到github，就必須要有private key跟public key，並且要把public key跟你的github帳號掛鉤起來，意思就是拿鎖頭去鎖你的github帳號，只能用你手上的private key去開。至於如何產生ssh，github<a href="https://help.github.com/articles/generating-ssh-keys">官網有教學</a>，建議你讀一讀那篇文章。在這邊提供我自己的設定</p>

<p>in ~/.ssh/config:</p>

<pre><code>Host tpy-blog
HostName github.com
User git
PreferredAuthentications publickey
IdentityFile ~/.ssh/{my_private_key}
</code></pre>

<p>再確認一次你的鑰匙</p>

<pre><code>ssh-add -l    
</code></pre>

<h2>進階: Custom Domain</h2>

<p><a href="http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages/"></a>
<a href="http://gibuloto.com/blog/install-octopress-with-ruby-1-dot-9-3/"></a></p>

<p>在octopress/source/CNAME裡(沒這個檔案的話就創建一個)寫入你的custom domain: my_custom_domain.com。
然後到你的DNS管理區設定一個CNAME至github.com
以我自己為例，in /source/CNAME</p>

<pre><code>blog.tpy.tw
</code></pre>

<p>我的DNS供應商(pchome)設定CNAME:blog, value: github.com。</p>

<h2>進階: 本機電腦部署至多個Github帳號</h2>

<p>你一定有機會在你自己的電腦同時使用「私人」以及「工作」用的github repo
然而當你push至github時，github只會用你所提交的ssh key辨識你的身份，而不是用git config user.name或是其他，所以要有一個切換ssh key的機制。</p>

<p>ssh-agent是你的鑰匙管家，而ssh-add這個指令可以新增/刪除目前管家手上所掌控的鑰匙</p>

<p>git remote add origin git@blog-1:you_github_account/you_github_account.github.com</p>

<pre><code>ssh-add -l # checkout which key you use to link to github, github identify you by this key
</code></pre>

<p>if you use user_A&#8217;s key to authenticate user_B&#8217;s github repo, it will fail of course</p>

<pre><code>ssh-add ~/.ssh/{private_key_of_blog1} # add key for blog1's repo
ssh-add -d ~/.ssh/{remove_other_key}
</code></pre>

<p>ref:</p>

<p>https://github.com/chalien/Multiple-public-ssh-key-github
http://net.tutsplus.com/tutorials/tools-and-tips/how-to-work-with-github-and-multiple-accounts/
http://stackoverflow.com/questions/3225862/multiple-github-accounts-ssh-config
http://stackoverflow.com/questions/2419566/best-way-to-use-multiple-ssh-private-keys-on-one-client
http://stackoverflow.com/questions/4665337/git-pushing-as-wrong-user
http://doblock.com/articles/using-public-keys-with-multiple-github-accounts</p>

<h2>ssh-add</h2>

<p>http://linux.die.net/man/1/ssh-add</p>

<h1>附錄: Git複習</h1>

<p>http://blog.longwin.com.tw/2009/05/git-initial-env-setup-2009/</p>

<pre><code>git remote -v
git remote add SOME_NAME git@you_ssh_host_not_ssh_host_name:your_github_username/your_github_username.github.com #your_github_username.github.com is actually your repo
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress實在是太酷啦!]]></title>
    <link href="http://red010182.github.com/blog/2013/02/25/title/"/>
    <updated>2013-02-25T20:07:00+08:00</updated>
    <id>http://red010182.github.com/blog/2013/02/25/title</id>
    <content type="html"><![CDATA[<p>Cool!
這篇post竟然是這樣編出來的：</p>

<p><img src="http://red010182.github.com/images/screenshots/shot.png" width="600"></p>

<p>然後再一句</p>

<pre><code>rake deploy
</code></pre>

<h1>我的天啊，太神奇了傑克!!</h1>

<h2>我的天啊，太神奇了傑克!!</h2>

<h3>我的天啊，太神奇了傑克!!</h3>

<h4>我的天啊，太神奇了傑克!!</h4>
]]></content>
  </entry>
  
</feed>
